# frozen_string_literal: true
f.semantic_errors

f.inputs(I18n.t('admin.job.form.detail_section_title')) do
  f.input :order
  f.input :job_date, as: :date_time_picker
  f.input :job_end_date, as: :date_time_picker
  f.input :full_time
  f.input :salary_type
  f.input :hourly_pay, hint: I18n.t('admin.job.form.hourly_pay_hint')
  f.input :hours

  f.input :language, hint: I18n.t('admin.job.form.language_hint'), collection: Language.system_languages.order(:en_name) # rubocop:disable Metrics/LineLength
  f.input :name
  f.input :short_description
  f.input :description
  f.input :swedish_drivers_license, hint: Arbetsformedlingen::DriversLicenseCode.codes.join(', ')
  f.input :car_required
  f.input :number_to_fill
end

f.actions

f.inputs(I18n.t('admin.job.form.admin_users_section_title')) do
  f.input :owner, collection: User.company_users, hint: I18n.t('admin.job.form.owner_hint') # rubocop:disable Metrics/LineLength
  f.input :company_contact, hint: I18n.t('admin.job.form.company_contact_hint')
  f.input :just_arrived_contact, hint: I18n.t('admin.job.form.just_arrived_contact_hint')
end

f.actions

f.inputs(I18n.t('admin.job.form.address_section_title')) do
  f.input :street
  f.input :city
  f.input :zip
  f.input(
    :municipality,
    as: :select,
    collection: Arbetsformedlingen::MunicipalityCode.to_form_array(name_only: true),
    hint: I18n.t('admin.job.form.municipality_hint')
  )
end

f.actions

f.inputs(I18n.t('admin.job.form.frilans_finans_section_title')) do
  f.input :category, hint: I18n.t('admin.job.form.category_hint')
end

f.actions

if job.persisted?
  f.inputs(I18n.t('admin.job.form.skills_title')) do
    f.has_many :job_skills, allow_destroy: false, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :skill, as: :select, collection: Skill.with_translations
      ff.input :proficiency, as: :select, collection: JobSkill::PROFICIENCY_RANGE
      ff.input :proficiency_by_admin, as: :select, collection: JobSkill::PROFICIENCY_RANGE
    end
  end

  f.actions

  f.inputs(I18n.t('admin.job.form.languages_title')) do
    f.has_many :job_languages, allow_destroy: false, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :language, as: :select, collection: Language.all
      ff.input :proficiency, as: :select, collection: JobLanguage::PROFICIENCY_RANGE
      ff.input :proficiency_by_admin, as: :select, collection: JobLanguage::PROFICIENCY_RANGE # rubocop:disable Metrics/LineLength
    end
  end

  f.actions
end

f.inputs(I18n.t('admin.job.form.status_section_title')) do
  f.input :staffing_job, hint: I18n.t('admin.job.form.hidden_hint')
  f.input :direct_recruitment_job, hint: I18n.t('admin.job.form.hidden_hint')
  f.input :hidden, hint: I18n.t('admin.job.form.hidden_hint')
  f.input :verified, hint: I18n.t('admin.job.form.verified_hint')
  f.input :upcoming, hint: I18n.t('admin.job.form.upcoming_hint')
  f.input :cancelled, hint: I18n.t('admin.job.form.cancelled_hint')
  f.input :filled, hint: I18n.t('admin.job.form.filled_hint')
  f.input :featured, hint: I18n.t('admin.job.form.featured_hint')
end

f.inputs(I18n.t('admin.job.form.partners_section_title')) do
  f.input :publish_on_linkedin, hint: I18n.t('admin.job.form.publish_on_linkedin.hint')
  f.input :publish_on_blocketjobb, hint: I18n.t('admin.job.form.publish_on_blocketjobb.hint') # rubocop:disable Metrics/LineLength

  if af_ad = job.arbetsformedlingen_ad
    f.li link_to(
      I18n.t('admin.job.show_arbetsformedlingen_ad'),
      admin_arbetsformedlingen_ad_path(af_ad)
    )
  else
    f.li link_to(
      I18n.t('admin.job.create_arbetsformedlingen_ad'),
      create_with_job_admin_arbetsformedlingen_ad_path(job_id: job.id)
    )
  end
end

f.actions
