# frozen_string_literal: true

url = if resource.persisted?
        admin_job_path(resource)
      else
        admin_jobs_path
      end

unless resource.persisted?
  resource.description = <<~DESC_MARKDOWN
    Det innebär att du kommer att anställas av Just Arrived och kommer sedan arbeta som konsult hos företaget. [Läs mer om vad det innebär att arbeta som konsult här](https://app.justarrived.se/guide/section/3/att-jobba-i-sverige/article/41/att_jobba_som_konsult_hos_ett_bemanningsf%C3%B6retag).
  DESC_MARKDOWN
end

# rubocop:disable Metrics/LineLength
active_admin_form_for(resource, url: url) do |f|
  f.semantic_errors(*f.object.errors.keys)

  columns do
    column do
      f.inputs(I18n.t('admin.job.section_title.basic')) do
        f.input :name, hint: I18n.t('admin.job.form.name_hint', input_html: { autocomplete: 'off' })
        f.input(:job_date, as: :datetime_picker, label: I18n.t('admin.job.form.job_date_label'))
        f.input(:job_end_date, as: :datetime_picker, label: I18n.t('admin.job.form.job_end_date_label'))
        f.input :owner, collection: User.company_users, hint: I18n.t('admin.job.form.owner_hint')
        f.input :company_contact, hint: I18n.t('admin.job.form.company_contact_hint')
      end
    end

    column do
      f.inputs(I18n.t('admin.job.section_title.internal')) do
        f.input :order, collection: Order.includes(:job_request)
        f.input :staffing_company, as: :select, collection: Company.staffing_agencies, hint: I18n.t('admin.job.form.staffing_company_hint')
        f.input :direct_recruitment_job, hint: I18n.t('admin.job.form.direct_recruitment_job_hint')
        f.input :just_arrived_contact, collection: User.delivery_users, hint: I18n.t('admin.job.form.just_arrived_contact_hint')
        f.input :category, hint: I18n.t('admin.job.form.category_hint')
      end
    end

    column do
      f.inputs(I18n.t('admin.job.section_title.status')) do
        f.input :cloned, label: I18n.t('admin.job.form.cloned_label'), hint: I18n.t('admin.job.form.cloned_hint')
        f.input :featured, hint: I18n.t('admin.job.form.featured_hint')
        f.input :filled, as: :boolean, hint: I18n.t('admin.job.form.filled_hint')
        f.input :cancelled, hint: I18n.t('admin.job.form.cancelled_hint')
        f.input :hidden, hint: I18n.t('admin.job.form.hidden_hint')
        # f.input :verified, hint: I18n.t('admin.job.form.verified_hint')
        # f.input :upcoming, hint: I18n.t('admin.job.form.upcoming_hint')
      end
    end
  end

  columns do
    column do
      f.inputs(I18n.t('admin.job.section_title.invoice')) do
        f.input :customer_hourly_price, hint: I18n.t('admin.job.form.customer_hourly_price_hint'), input_html: { autocomplete: 'off' }
        f.input :hourly_pay, hint: I18n.t('admin.job.form.hourly_pay_hint'), input_html: { autocomplete: 'off' }
        f.input :hours, input_html: { autocomplete: 'off' }
        f.input :number_to_fill, hint: 'How many positions do you want to fill?'
        f.input :full_time
        f.input :invoice_comment, hint: 'This will be displayed on the invoice from Frilans Finans', input_html: { rows: 4 }
      end
    end

    column do
      f.inputs(I18n.t('admin.job.section_title.address')) do
        f.input :street, input_html: { autocomplete: 'off' }
        f.input :zip, input_html: { autocomplete: 'off' }
        f.input :city, input_html: { autocomplete: 'off' }
        f.input(
          :municipality,
          as: :select,
          collection: Arbetsformedlingen::MunicipalityCode.to_form_array(name_only: true),
          hint: I18n.t('admin.job.form.municipality_hint'),
          input_html: { autocomplete: 'off' }
        )
      end
    end
  end

  panel(I18n.t('admin.job.section_title.data')) do
    columns do
      column do
        f.has_many :job_languages, allow_destroy: false, new_record: true do |ff|
          ff.semantic_errors(*ff.object.errors.keys)

          ff.input :language, as: :select, collection: Language.all
          ff.input :proficiency, as: :select, collection: JobLanguage::PROFICIENCY_RANGE
          ff.input :proficiency_by_admin, as: :select, collection: JobLanguage::PROFICIENCY_RANGE
        end
      end

      column do
        f.has_many :job_occupations, allow_destroy: false, new_record: true do |ff|
          ff.semantic_errors(*ff.object.errors.keys)

          ff.input :occupation, as: :select, collection: Occupation.with_translations
          ff.input :importance
          ff.input :years_of_experience
        end
      end

      column do
        f.has_many :job_skills, allow_destroy: false, new_record: true do |ff|
          ff.semantic_errors(*ff.object.errors.keys)

          ff.input :skill, as: :select, collection: Skill.visible.with_translations
          ff.input :proficiency, as: :select, collection: JobSkill::PROFICIENCY_RANGE
          ff.input :proficiency_by_admin, as: :select, collection: JobSkill::PROFICIENCY_RANGE
        end
      end
    end
  end

  h1 I18n.t('admin.job.section_title.ad')

  tabs do
    tab(I18n.t('admin.job.section_title.settings')) do
      columns do
        column do
          f.inputs(I18n.t('admin.job.section_title.dates')) do
            f.input :last_application_at, as: :datetime_picker, input_html: { autocomplete: 'off' }
            # If the job has *not* been saved then set the current
            # time as the publish date
            # f.object.publish_at = Time.zone.now unless f.object.persisted?
            f.input :publish_at, as: :datetime_picker, input_html: { autocomplete: 'off' }
            f.input :unpublish_at, as: :datetime_picker, input_html: { autocomplete: 'off' }
          end
        end

        column do
          f.inputs(I18n.t('admin.job.section_title.settings')) do
            f.input :preview_key, hint: I18n.t('admin.job.form.preview_key_hint'), input_html: { autocomplete: 'off' }
          end
        end
      end
    end

    tab(I18n.t('admin.job.section_title.content')) do
      f.inputs(I18n.t('admin.job.section_title.ad')) do
        f.input :short_description, hint: I18n.t('admin.job.form.short_description_hint')
        f.input :description, input_html: { markdown: true }

        columns do
          column do
            f.input :tasks_description, input_html: { markdown: true }
          end

          column do
            f.input :applicant_description, input_html: { markdown: true }
          end

          column do
            f.input :requirements_description, input_html: { markdown: true }
          end
        end
      end
    end

    tab(I18n.t('admin.job.section_title.job_boards')) do
      f.inputs(I18n.t('admin.job.form.partners_section_title')) do
        f.input :swedish_drivers_license, hint: Arbetsformedlingen::DriversLicenseCode.codes.join(', ')
        f.input :car_required
        hr

        f.input :publish_on_linkedin, hint: I18n.t('admin.job.form.publish_on_linkedin.hint')
        f.input :publish_on_blocketjobb, hint: I18n.t('admin.job.form.publish_on_blocketjobb.hint')
        f.input :blocketjobb_category, collection: BlocketjobbCategories.to_form_array, hint: I18n.t('admin.job.form.blocketjobb_category.hint')
        f.input :publish_on_metrojobb, hint: I18n.t('admin.job.form.publish_on_metrojobb.hint')
        f.input :metrojobb_category, collection: MetrojobbCategories.to_form_array, hint: I18n.t('admin.job.form.metrojobb_category.hint')

        f.has_many :arbetsformedlingen_ad, allow_destroy: false, new_record: true do |ff|
          ff.semantic_errors(*ff.object.errors.keys)
          ff.input :occupation, collection: Arbetsformedlingen::OccupationCode.to_form_array(name_only: true)
          ff.input :published
        end

        if job.persisted?
          f.li link_to(
            I18n.t('admin.job.create_arbetsformedlingen_ad'),
            admin_arbetsformedlingen_ad_path(job_id: job.id)
          )
        end
      end
    end
  end

  f.actions
end
# rubocop:enable Metrics/LineLength
