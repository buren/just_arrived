# frozen_string_literal: true

columns do
  column do
    panel(I18n.t('admin.job.section_title.basic')) do
      attributes_table_for(job) do
        row :name
        row :short_description
        row :job_date
        row :job_end_date
        row :owner
        row :company_contact
        row :employment_periods do
          safe_join(job.employment_periods.map do |emp|
            link_to(emp.display_name, admin_employment_period_path(emp))
          end, ', ')
        end
      end
    end
  end

  column do
    panel(I18n.t('admin.job.section_title.internal')) do
      attributes_table_for(job) do
        row :order
        row :staffing_company
        row :direct_recruitment_job
        row :just_arrived_contact
        row :category
      end
    end
  end

  column do
    panel(I18n.t('admin.job.section_title.status')) do
      attributes_table_for(job) do
        row :cloned
        row :featured
        row(:filled) { status_tag(job.filled) }
        row :cancelled
        # row :hidden
        # row :verified
        # row :upcoming
      end
    end
  end
end

columns do
  column do
    panel(I18n.t('admin.job.section_title.invoice')) do
      attributes_table_for(job) do
        row :customer_hourly_price
        row :hourly_pay
        row :hours
        row :number_to_fill
        row :full_time
        row :invoice_comment
      end
    end
  end

  column do
    panel(I18n.t('admin.job.section_title.address')) do
      attributes_table_for(job) do
        row :street
        row :zip
        row :city
        row :municipality
      end
    end
  end
end

panel(I18n.t('admin.job.section_title.data')) do
  columns do
    column do
      attributes_table_for(job) do
        row(:languages) { job_languages_badges(job_languages: job_languages) }
      end
    end

    column do
      attributes_table_for(job) do
        row :occupations do |job|
          job_occupations.map do |jo|
            "#{jo.occupation.name} (#{jo.importance}, yxp: #{jo.years_of_experience})"
          end.join(', ')
        end
      end
    end

    column do
      attributes_table_for(job) do
        row(:skills) { job_skills_badges(job_skills: job_skills, join_with: br) }
      end
    end
  end
end

h1 I18n.t('admin.job.section_title.ad')

tabs do
  tab(I18n.t('admin.job.section_title.settings')) do
    columns do
      column do
        attributes_table_for(job) do
          row :last_application_at
          # If the job has *not* been saved then set the current
          # time as the publish date
          # f.object.publish_at = Time.zone.now unless f.object.persisted?
          row :publish_at
          row :unpublish_at
        end
      end

      column do
        attributes_table_for(job) do
          row :featured
          row :preview_key
        end
      end
    end

  end

  tab(I18n.t('admin.job.section_title.content')) do
    attributes_table_for(job) do
      row :short_description
      row(:description) { |job| markdown_to_html(job.description) }
    end

    columns do
      column do
        div do
          attributes_table_for(job) do
            row(I18n.t('admin.job.show.tasks_description.short_name')) do |job|
              markdown_to_html(job.tasks_description)
            end
          end
        end
      end

      column do
        div do
          attributes_table_for(job) do
            row(I18n.t('admin.job.show.applicant_description.short_name')) do |job|
              markdown_to_html(job.applicant_description)
            end
          end
        end
      end

      column do
        div do
          attributes_table_for(job) do
            row(I18n.t('admin.job.show.requirements_description.short_name')) do |job|
              markdown_to_html(job.requirements_description)
            end
          end
        end
      end
    end
  end

  tab(I18n.t('admin.job.section_title.job_boards')) do
    attributes_table_for(job) do
      row :municipality
      row :swedish_drivers_license
      row :car_required

      row :publish_on_linkedin
      row :publish_on_blocketjobb
      row :blocketjobb_category
      row :publish_on_metrojobb
      row :metrojobb_category

      if af_ad = job.arbetsformedlingen_ad
        link_to(
          I18n.t('admin.job.show_arbetsformedlingen_ad'),
          admin_arbetsformedlingen_ad_path(af_ad)
        )
      elsif job.persisted?
        link_to(
          I18n.t('admin.job.create_arbetsformedlingen_ad'),
          create_with_job_admin_arbetsformedlingen_ad_path(job_id: job.id)
        )
      end
    end
  end
end

br
br

active_admin_comments_for(job)
