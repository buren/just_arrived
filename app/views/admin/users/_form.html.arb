# frozen_string_literal: true
f.semantic_errors(*f.object.errors.keys)

if user.persisted?
  f.inputs I18n.t('admin.user.form.details') do
    f.input :email
    f.input :password, hint: I18n.t('admin.user.form.password.hint')
    f.input :first_name
    f.input :last_name
    f.input :gender
    f.input :system_language, hint: I18n.t('admin.user.form.language.hint'), collection: Language.system_languages.order(:en_name) # rubocop:disable Metrics/LineLength
    f.input :phone
    f.input :ssn
    f.input :street
    f.input :city
    f.input :zip
    f.input :skype_username
    f.input :description
  end

  f.actions

  f.inputs I18n.t('admin.user.form.competences') do
    f.has_many :user_tags, allow_destroy: true, new_record: true do |ff|
      ff.input :tag, as: :select, collection: Tag.all
    end

    f.has_many :employment_periods, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :started_at, as: :datetime_picker
      ff.input :ended_at, as: :datetime_picker
      ff.input :percentage

      ff.input :job, collection: Job.with_translations

      ff.input :employer_signed_at, as: :datetime_picker, collection: User.delivery_users
      ff.input :employee_signed_at, as: :datetime_picker
    end

    f.has_many :user_occupations, allow_destroy: false, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :occupation, as: :select, collection: Occupation.with_translations
      ff.input :years_of_experience, as: :select, collection: 0..100
    end

    f.has_many :user_languages, allow_destroy: false, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :language, as: :select, collection: Language.order(:en_name)
      ff.input :proficiency_by_admin, as: :select, collection: UserLanguage::PROFICIENCY_RANGE # rubocop:disable Metrics/LineLength
    end

    f.has_many :user_skills, allow_destroy: false, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :skill, as: :select, collection: Skill.with_translations
      ff.input :proficiency_by_admin, as: :select, collection: UserSkill::PROFICIENCY_RANGE # rubocop:disable Metrics/LineLength
    end

    f.has_many :user_interests, allow_destroy: false, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :interest, as: :select, collection: Interest.with_translations
      ff.input :level_by_admin, as: :select, collection: UserInterest::LEVEL_RANGE
    end

    f.has_many :user_documents, allow_destroy: false, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.inputs('Documents', for: [:document, ff.object.document || Document.new]) do |fff| # rubocop:disable Metrics/LineLength
        ff.input :category, required: true

        fff.semantic_errors(*fff.object.errors.keys)
        fff.input :document, required: true, as: :file
      end
    end

    f.has_many :feedbacks, new_record: true do |ff|
      ff.semantic_errors(*ff.object.errors.keys)

      ff.input :job, collection: Job.with_translations
      ff.input :title
      ff.input :body
    end

    f.input :interview_comment
    f.input :interviewed_at, as: :datetime_picker
    f.input :job_experience
    f.input :education
    f.input :competence_text
  end

  f.actions

  f.inputs I18n.t('admin.user.form.immigration_status') do
    f.input :current_status
    f.input :at_und
    f.input :arrived_at, as: :datetime_picker
    f.input :country_of_origin
    f.input :arbetsformedlingen_registered_at, as: :datetime_picker
  end

  f.actions

  f.inputs I18n.t('admin.user.form.status_flags') do
    f.input :public_profile, hint: I18n.t('admin.user.form.public_profile.hint')
    f.input :verified
    f.input :admin
    f.input :super_admin
    f.input :anonymized
    f.input :banned, hint: I18n.t('admin.user.form.banned.hint')
    f.input :managed, hint: I18n.t('admin.user.form.managed.hint')
    f.input :just_arrived_staffing, hint: I18n.t('admin.user.form.just_arrived_staffing.hint') # rubocop:disable Metrics/LineLength
  end

  f.actions

  f.inputs I18n.t('admin.user.form.payment_attributes') do
    f.input :account_clearing_number
    f.input :account_number
  end

  f.actions

  f.inputs I18n.t('admin.user.form.misc') do
    f.input :company
    f.input :next_of_kin_name
    f.input :next_of_kin_phone
    f.input :ignored_notifications, as: :select, collection: UserNotification.names, multiple: true # rubocop:disable Metrics/LineLength
  end

  f.actions

  f.inputs I18n.t('admin.user.form.presentation_inputs') do
    f.input :presentation_profile
    f.input :presentation_personality
    f.input :presentation_availability
  end
else
  f.inputs I18n.t('admin.user.form.create_user') do
    f.input :email
    f.input :password
    f.input :first_name
    f.input :last_name
    f.input :gender
    f.input :system_language, hint: I18n.t('admin.user.form.language.hint'), collection: Language.system_languages.order(:en_name) # rubocop:disable Metrics/LineLength
    f.input :company
    f.input :managed, hint: I18n.t('admin.user.form.managed.hint')
    f.input :phone
    f.input :ssn
    f.input :street
    f.input :city
    f.input :zip
    f.input :skype_username
  end
end

f.actions
