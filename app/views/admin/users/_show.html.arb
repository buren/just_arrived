# frozen_string_literal: true

columns do
  column do
    panel(I18n.t('admin.user.show.basic_info_title')) do
      attributes_table_for(user) do
        row :image do
          profile_image = user_profile_image(user: user, size: :small)

          image_tag(profile_image) if profile_image
        end
        row :name
        row :email
        row :phone
        row :skype_username
        row :gender
        row :street
        row :city
        row :zip
        row :ssn
        row :linkedin_url
        row :facebook_url
      end

      if user.interview_comment.present?
        h4 I18n.t('admin.user.show.interview_comment')
        div do
          simple_format(user.interview_comment)
        end
      end

      render partial: 'admin/users/customer_presentation_fields', locals: { user: user }

      div do
        content_tag(:p) do
          strong(
            [
              user.interviewed_at&.to_date, user.interviewed_by&.name
            ].compact.join(', ')
          )
        end
      end
    end
  end

  if user.candidate?
    column do
      panel I18n.t('admin.user.show.candidate_summary') do
        h3(
          link_to(
            I18n.t('admin.user.total_job_applications', count: total_job_applications),
            user_applications_path(user)
          )
        )

        h3 I18n.t('admin.user.show.city', city: user.city) if user.city.present?

        h3 I18n.t('admin.user.show.tags')
        div do
          content_tag(:p, user_tag_badges(user: user))
        end

        render(
          partial: 'admin/employment_periods/simple_list',
          locals: {
            employment_periods: user.employment_periods.reverse
          }
        )

        div do
          attributes_table_for(user) do
            row :occupations do |_user|
              user_occupations.map do |user|
                "#{user.occupation.name} (yxp: #{user.years_of_experience})"
              end.join(', ')
            end
          end
        end

        h3 I18n.t('admin.user.show.skills')
        div do
          content_tag(:p, user_skills_badges(user_skills: user.user_skills))
        end

        h3 I18n.t('admin.user.show.interests')
        div do
          content_tag(:p, user_interests_badges(user_interests: user.user_interests))
        end

        h3 I18n.t('admin.user.show.languages')
        div do
          content_tag(:p, user_languages_badges(user_languages: user.user_languages))
        end

        h3 I18n.t('admin.user.show.average_score', score: user.average_score || '-')

        h3 I18n.t('admin.user.show.verified', verified: user.verified)

        if cv = user.user_documents.cv.last&.document
          h3 safe_join(
            [
              download_link_to(
                url: cv.url,
                file_name: cv.document_file_name,
                title: I18n.t('admin.download')
              ),
              'CV'
            ],
            ' '
          )
        end

        h3 I18n.t('admin.user.show.filters')
        div do
          content_tag(:p) do
            filter_links = user.filters.map do |filter|
              path = admin_filter_users_path + AdminHelpers::Link.query(:filter_id, filter.id) # rubocop:disable Metrics/LineLength
              simple_badge_tag(link_to(filter.name, path))
            end
            safe_join(filter_links, '')
          end
        end

        render(
          partial: 'admin/users/jobs_tables',
          locals: {
            ongoing_jobs: user.employed_for_jobs.ongoing.with_translations,
            future_jobs: user.jobs.future.with_translations,
            previous_performed_jobs: user.employed_for_jobs.passed.with_translations
          }
        )

        hr
        h3 I18n.t('admin.user.show.feedbacks')
        div do
          user.feedbacks.each do |feedback|
            h4 feedback.title
            div { simple_format(feedback.body) }
            hr
          end
        end
      end
    end
  end
end

if user.candidate?
  panel 'CV' do
    div do
      title = I18n.t('admin.job_user.show.no_resume_uploaded')
      render_or_link_document(resume) || h3(title)
    end
  end

  panel(I18n.t('admin.user.show.candidate_status')) do
    attributes_table_for(user) do
      row :current_status
      row :at_und
      row :arrived_at
      row :country_of_origin
    end
  end

  panel(I18n.t('admin.user.show.profile')) do
    div do
      h3 User.human_attribute_name(:description)
      div do
        simple_format(user.description)
      end
    end

    div do
      h3 User.human_attribute_name(:job_experience)
      div do
        simple_format(user.job_experience)
      end
    end

    div do
      h3 User.human_attribute_name(:competence_text)
      div do
        simple_format(user.competence_text)
      end
    end

    div do
      h3 User.human_attribute_name(:education)
      div do
        simple_format(user.education)
      end
    end
  end

end

columns do
  column do
    panel(I18n.t('admin.user.show.status_flags')) do
      attributes_table_for(user) do
        row :public_profile
        row :super_admin
        row :admin
        row :managed
        row :anonymized
        row :banned
        row :verified
        row :just_arrived_staffing
      end
    end
  end

  column do
    panel I18n.t('admin.user.show.payment') do
      attributes_table_for(user) do
        row :account_clearing_number
        row :account_number
        row :frilans_finans_payment_details
      end
    end
  end
end

render partial: 'admin/chats/latest_messages', locals: { support_chat: support_chat }

panel I18n.t('admin.user.show.misc') do
  attributes_table_for(user) do
    row :ignored_notifications do
      user.ignored_notifications.join(', ')
    end

    row :id
    row :frilans_finans_id

    row :company
    row :system_language
    row :language

    row :contact_email
    row :primary_role

    row :latitude
    row :longitude
    row :zip_latitude
    row :zip_longitude

    row(:created_at) { datetime_ago_in_words(user.created_at) }
    row(:updated_at) { datetime_ago_in_words(user.updated_at) }
  end
end

active_admin_comments_for(user)
